<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 笔记 | Lost & Found]]></title>
  <link href="http://wangshenghu.github.io/blog/categories/bi-ji/atom.xml" rel="self"/>
  <link href="http://wangshenghu.github.io/"/>
  <updated>2016-09-06T21:00:30+08:00</updated>
  <id>http://wangshenghu.github.io/</id>
  <author>
    <name><![CDATA[WangshengHu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress的个性化设置]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/07/personal-settings-of-octopress/"/>
    <updated>2016-05-07T13:30:22+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/07/personal-settings-of-octopress</id>
    <content type="html"><![CDATA[<h2>写在前面</h2>

<p>本文主要记录一些关于octopress的个性化配置方法。</p>

<!--more-->


<h2>个性化配置</h2>

<h3>1. 增加Categories列表</h3>

<p>首先在<code>plugins</code>目录下添加<code>category_list_tag.rb</code>文件，代码如下：
```ruby
module Jekyll
  class CategoryListTag &lt; Liquid::Tag
    def render(context)
      html = &ldquo;&rdquo;
      categories = context.registers[:site].categories.keys
      categories.sort.each do |category|
        posts_in_category = context.registers[:site].categories[category].size
        category_dir = context.registers[:site].config[&lsquo;category_dir&rsquo;]
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, &lsquo;-&rsquo;).gsub(/-{2,}/, &lsquo;-&rsquo;).downcase)
        html &lt;&lt; &ldquo;<li class='category'><a href='http://wangshenghu.github.io/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\n&rdquo;
      end
      html
    end
  end
end</p>

<p>Liquid::Template.register_tag(&lsquo;category_list&rsquo;, Jekyll::CategoryListTag)
<code>
然后在`\source\_includes\asides`目录（或`\source\_includes\custom\asides`目录）下添加`category_list.html`文件，代码如下：
</code>html
<section>
  <h1>Categories</h1>
  <ul id="categories">
    {% raw %}{% category_list %}{% endraw %}
  </ul>
</section>
<code>``
最后在</code>_config.yml<code>中</code>default_asides:<code>一栏添加</code>asides/category_list.html<code>（或</code>custom/asides/category_list.html<code>）即可。  
**注意：上述步骤有一个问题，那就是如果category包含中文的话生成的侧边栏链接会是404页面（因为链接中不能包含中文），需要将</code>category_list_tag.rb<code>文件中第11行代码里的</code>category_url<code>改成</code>category.to_url.downcase<code>，该代码会将中文转换成拼音。**  
**另外，上面代码中第4行</code>{% raw %}{% category_list %}{% endraw %}<code>若想在网页上正确显示必须使用</code>{% raw %}{% RAW %}{% endraw %}<code>your_content</code>{% raw %}{% ENDRAW %}{% endraw %}`（将大写改成小写）。这是markdown里强制显示原始字符串而不进行解释的语法**</p>

<h3>2. 首页文章缺省显示</h3>

<p>只需要在每篇你写的markdown格式的博文中在你想要在首页显示的文字后面加上<code>&lt;!--more--&gt;</code>即可。</p>

<h3>3. 设置链接默认在新窗口打开</h3>

<p>在<code>\source\_includes\custom\head.html</code>文件中添加如下代码：
```html</p>

<script>
    function addBlankTargetForLinks () {
      $('a[href^="http"]').each(function(){
          $(this).attr('target', '_blank');
      });
    }

    $(document).bind('DOMNodeInserted', function(event) {
      addBlankTargetForLinks();
    });
</script>


<p>```</p>

<h3>4. 在首页添加选项卡</h3>

<p>首先运行<code>rake new_page['about']</code>，在<code>source</code>目录下会新生成一个<code>about</code>目录，里面包含一个<code>index.markdown</code>文件。编辑该文件，然后运行<code>rake generate</code>将会在<code>public</code>目录下生成一个对应的<code>index.html</code>文件。然后编辑<code>\source\_includes\custom\navigation.html</code>文件，即可将生成的about页面链接添加到首页选项卡。</p>

<h3>5. 添加disqus评论功能</h3>

<p>只需要编辑<code>_config.yml</code>中相应部分即可。具体操作为在<code>_config.yml</code>文件中对应位置填写自己的账号。</p>

<h3>6. 添加访客计数功能</h3>

<p>我采用了Flag Counter，直接去<a href="http://www.flagcounter.com/">官网</a>生成html代码，然后拷贝到<code>source\_includes\asides\flag_counter.html</code>文件（需新建），最后在<code>_config.yml</code>中<code>default_asides:</code>一栏添加<code>asides/flag_counter.html</code>即可。</p>

<h3>7. 优化加载速度</h3>

<p>由于国内墙的原因，请求墙外网站资源的速度极慢，因此需要删除某些用到国外网站资源的功能。具体如下：<br/>
1. 将<code>\source\_includes\head.html</code>文件中的google的jquery脚本地址改成<a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs">百度</a>的。<br/>
2. 将<code>\source\_includes\custom\head.html</code>文件中的google font请求注释掉。<br/>
3. 将<code>_config.yml</code>文件中的twitter内容注释掉。</p>

<h2>参考文献</h2>

<p><a href="http://tianweili.github.io/blog/2015/01/11/setup-octopress-blog/">Octopress博客的个性化配置</a><br/>
<a href="https://shengmingzhiqing.com/blog/octopress-lean-modification-5.html/">Octopress 精益修改 (5)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博客 - 如何配置octopress+github博客]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/06/first-blog-how-to-configure-this/"/>
    <updated>2016-05-06T20:45:26+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/06/first-blog-how-to-configure-this</id>
    <content type="html"><![CDATA[<h2>写在前面</h2>

<p>很久以前就想配置属于自己的博客了，可是一直光说不做，前不久系统升了win10，顺便就想把这个事情也给做了。在配置过程中遇到诸多问题，记录下来方便以后查阅。</p>

<!--more-->


<h2>搭建环境</h2>

<p>我的操作系统是windows10 64bit企业版。</p>

<h2>配置流程</h2>

<h3>1. 安装Git for Windows</h3>

<p>直接去<a href="https://git-scm.com/">git官网</a>下载安装即可。</p>

<h3>2. 安装Ruby</h3>

<p>去<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>下载Ruby。注意安装时勾选添加到系统环境变量，或者稍后自己手动设置。<strong>注意：我在配置时用最新版本Ruby2.3.0到最后一步bundle install时总是失败，无奈改成Ruby2.2.4就成功了。</strong></p>

<h3>3. 安装Python2.7</h3>

<p>去<a href="https://www.python.org/downloads/">Python官网</a>下载安装。注意安装时勾选添加到系统环境变量，或者稍后自己手动设置。<br/>
安装后运行<code>easy_install pygments</code>安装代码高亮脚本。</p>

<h3>4. 安装octopress</h3>

<pre><code class="bash">cd &lt;wherever_you_want_to_save_your_blog&gt;
git clone git://github.com/imathis/octopress.git &lt;your_dir&gt;

gem install bundle
bundle install

rake install
rake preview
</code></pre>

<p>之后在浏览器输入localhost:4000就可以查看了。</p>

<h3>5. 部署到Github</h3>

<p>在Github上新建一个Repository，命名为<code>username.github.io</code>。然后在cmd中进行部署。
```bash
cd <wherever_your_octopress_is>
rake setup_github_pages
<a href="https://github.com/your_username/your_username.github.io">https://github.com/your_username/your_username.github.io</a></p>

<p>rake deploy</p>

<h1>新建一篇博文</h1>

<p>rake new_post[&lsquo;title of post&rsquo;]</p>

<h1>新建一个网页</h1>

<p>rake new_page[&lsquo;name of page&rsquo;]</p>

<p>rake generate</p>

<p>rake deploy
```
访问username.github.io即可查看，可能会有延迟，一般不超过1分钟。</p>

<h3>6. 源码维护</h3>

<p>在上一步中运行<code>rake deploy</code>后会将生成的静态html页面push到Github，但源码还是在本地。为方便维护，我们可以将源码也push到Github。
<code>bash
git add .
git commit -m "source code"
git push origin source
</code></p>

<h2>参考文献</h2>

<p><a href="http://silentming.net/blog/2015/11/13/build-blog-on-github-with-octopress/">Octopress博客(1)-在windows 10上使用octopress搭建个人博客</a><br/>
<a href="https://segmentfault.com/markdown">Markdown 编辑器语法指南</a></p>
]]></content>
  </entry>
  
</feed>
