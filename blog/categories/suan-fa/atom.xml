<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | Lost & Found]]></title>
  <link href="http://wangshenghu.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://wangshenghu.github.io/"/>
  <updated>2016-05-11T21:20:04+08:00</updated>
  <id>http://wangshenghu.github.io/</id>
  <author>
    <name><![CDATA[WangshengHu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hihoCoder#1015 - KMP算法]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/11/hihocoder-kmp/"/>
    <updated>2016-05-11T19:27:36+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/11/hihocoder-kmp</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>经典的模式字符串匹配问题。<br/>
具体描述请见<a href="http://hihocoder.com/problemset/problem/1015">hihoCoder</a>。</p>

<!--more-->


<h2>解题思路</h2>

<p>KMP算法主要利用了在一次匹配失败后收集信息，选取下一个起始点进行重新匹配，省去了大量冗余比较。<br/>
首先，考察下述例子：<br/>
<code>原串：  bababa</code><br/>
<code>模式串：bababb</code><br/>
我们给出两个标记，j是原串上当前遍历到的位置，i是模式串上当前遍历到的位置，那么可以发现一个性质：假设当前在模式串的i+1位置发生了不匹配，而且满足模式串[1, t]与[i-t+1, i]相等的最大的t为k，那么只有将模式串至少前进k-1才可能发生匹配，且只需要从原串上当前位置j，以及模式串上位置k+1继续比较。这个模式字符串的不同位置对应的k被称为next数组。<br/>
暴力求解next数组将会是M<sup>2</sup>的时间复杂度，仔细思考可以发现求解next数组本身也可以利用上述想法。假设当前已经求出next[i]，我们可以考虑原串[1, i+1]与模式串[1, i]的匹配过程，可以发现最后求得的模式串匹配点即是next[i+1]。因此可以用递归的形式求解next数组。</p>

<h2>时间复杂度</h2>

<p>首先考虑每次i++的情况，进行一次比较，共n次；其次考虑i不变的情况，j=next[j]，模式串是永远往右移动的，最多n次。因此时间复杂度为N，加上计算next数组，时间复杂度为N + M。</p>

<h2>代码</h2>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void calNext(string str, int idx, int* next) {
    if (idx &gt; str.size())
        return;

    int q = next[idx - 1];
    while (q != -1) {
        if (str[q] == str[idx - 1]) {
            next[idx] = q + 1;
            break;
        }
        q = next[q];
    }
    if (q == -1)
        next[idx] = 0;
    calNext(str, idx + 1, next);
}

int kmp(string str, string pattern) {
    // resolve the NEXT array
    int* next = new int[pattern.size() + 1];
    next[0] = -1;
    calNext(pattern, 1, next);

    // pattern match
    int m = 0;
    int i = 0, j = 0;
    for (; i &lt; str.size();) {
        if (j == -1) {
            i++;
            j = 0;
            continue;
        }
        int k = j;
        for (; k &lt; pattern.size(); k++)
            if (str[i + k - j] != pattern[k])
                break;
        if (k == pattern.size())
            m++;
        i += k - j;
        j = next[k];
    }

    return m;
}

int main() {
    int N = 0;
    cin &gt;&gt; N;
    for (int i = 0; i &lt; N; i++) {
        string pattern, str;
        cin &gt;&gt; pattern &gt;&gt; str;

        cout &lt;&lt; kmp(str, pattern) &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder#1014 - Trie树]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/11/hihocoder-trie/"/>
    <updated>2016-05-11T18:05:08+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/11/hihocoder-trie</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>Trie树就是字典树。对于一个给定的词典，任给一个字符串，输出词典中以该字符串为前缀的单词数目。<br/>
具体描述请见<a href="http://hihocoder.com/problemset/problem/1014">hihoCoder</a>。</p>

<!--more-->


<h2>解题思路</h2>

<p>在建立Trie树的同时我们就可以着手统计以某个字符串为前缀的节点个数，即每次添加一个新单词的时候，沿途更新所有经过的节点。</p>

<h2>时间复杂度</h2>

<p>单词查询用时26M（M：查询字符串的长度），单次插入用时26M。</p>

<h2>代码</h2>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

struct Node {
    int L = 1;
    char ch = ' ';
    vector&lt;Node*&gt; successors;

    Node(char c) {
        ch = c;
    }
};

class Trie {
private:
    Node* root;

    void updatePrefix(Node* node, string word, int idx) {
        if (idx == word.size())
            return;

        bool find = false;
        for (int i = 0; i &lt; node-&gt;successors.size(); i++) {
            if (node-&gt;successors[i]-&gt;ch == word[idx]) {
                find = true;
                node-&gt;successors[i]-&gt;L++;
                updatePrefix(node-&gt;successors[i], word, idx + 1);
                break;
            }
        }

        if (!find) {
            for (int i = idx; i &lt; word.size(); i++) {
                node-&gt;successors.push_back(new Node(word[i]));
                node = node-&gt;successors.back();
            }
        }
    }

    int findPrefix(Node* node, string query, int idx) {
        for (int i = 0; i &lt; node-&gt;successors.size(); i++) {
            if (node-&gt;successors[i]-&gt;ch == query[idx]) {
                if (idx == query.size() - 1)
                    return node-&gt;successors[i]-&gt;L;

                return findPrefix(node-&gt;successors[i], query, idx + 1);
            }
        }

        return 0;
    }

    void deleteTrie(Node* node) {
        for (int i = 0; i &lt; node-&gt;successors.size(); i++)
            deleteTrie(node-&gt;successors[i]);
        delete node;
    }

public:
    Trie() {
        root = new Node('$');
    }

    ~Trie() {
        deleteTrie(root);
    }

    void insert(string word) {
        updatePrefix(root, word, 0);
    }

    int getStat(string query) {
        return findPrefix(root, query, 0);
    }
};

int main() {
    int n = 0;
    cin &gt;&gt; n;
    string* words = new string[n];
    for (int i = 0; i &lt; n; i++)
        cin &gt;&gt; words[i];
    int m = 0;
    cin &gt;&gt; m;
    string* queries = new string[m];
    for (int i = 0; i &lt; m; i++)
        cin &gt;&gt; queries[i];

    Trie trie;
    for (int i = 0; i &lt; n; i++)
        trie.insert(words[i]);

    for (int i = 0; i &lt; m; i++)
        cout &lt;&lt; trie.getStat(queries[i]) &lt;&lt; endl;

    delete[] words, queries;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder#1296 - 数论三·约瑟夫问题]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/11/hihocoder-josephus/"/>
    <updated>2016-05-11T13:41:29+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/11/hihocoder-josephus</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>N个人围成一个圈，编号为0&hellip;N-1，随机一个数字K，从0号开始按从1到K的顺序报数，报到K的人出局，下一个人从1开始，依此循环。最后留下的人为胜者。求胜者的编号。<br/>
具体描述请见<a href="http://hihocoder.com/problemset/problem/1296">hihoCoder</a>。</p>

<!--more-->


<h2>解题思路</h2>

<p>此题是著名的约瑟夫（Josephus）问题，直接暴力解的话时间复杂度是MN。考虑递推关系，可以得到<code>f[n] = (f[n-1] + K) mod n</code>。具体证明如下：<br/>
假设n个人排好序：<br/>
<code>0 1 2 3 ... n-1</code><br/>
此时先执行第一遍报数，将位置T（(K-1) mod n）的人去掉，剩下的人排序：<br/>
<code>0 1 2 ... T-1, T+1, T+2, ... n-1</code><br/>
问题转换为从T+1开始，N-1个人的约瑟夫问题，此时胜者的编号应该为(f[n-1] + T+1) mod n，即(f[n-1] + K) mod n。证毕。<br/>
此时时间复杂度为N，但仍可进行改进。每一次递减的幅度可以更大，比如N=10，K=4：<br/>
<code>0 1 2 3 4 5 6 7 8 9</code><br/>
遍历一遍，经过两轮报数，剩下的序列是：<br/>
<code>0 1 2 - 4 5 6 -8 9</code><br/>
此时仍然可以用地推关系求解，从f[10]到f[8]，不过递推关系修改如下：
<code>f[n - n/K] &lt; n mod K: f[n] = f[n - n/K] - n mod K + n</code><br/>
<code>f[n - n/K] &gt;= n mod K: f[n] = f[n - n/K] - n mod K + (f[n - n/K] - n mod K)/(K - 1)（遍历完一遍后余下的序列不连续）</code><br/>
注意当K > n之后问题回归到最开始的解法。</p>

<h2>时间复杂度</h2>

<p>修改过后的算法时间复杂度为log<sub>K</sub>N + K。</p>

<h2>代码</h2>

<pre><code class="c++">#include &lt;iostream&gt;
using namespace std;

int josephus(int n, int k) {
    if (n == 1)
        return 0;

    int ret = 0;
    if (n &lt; k) {
        for (int i = 2; i &lt;= n; i++)
            ret = (ret + k) % i;
        return ret;
    }

    ret = josephus(n - n / k, k);
    if (ret &lt; n % k)
        ret = ret - n % k + n;
    else
        ret = ret - n % k + (ret - n % k) / (k - 1);

    return ret;
}

int main() {
    int t = 0;
    cin &gt;&gt; t;
    for (int i = 0; i &lt; t; i++) {
        int n = 0, k = 0;
        cin &gt;&gt; n &gt;&gt; k;

        cout &lt;&lt; josephus(n, k) &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder#1272 - 买零食]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/11/hihocoder-buy-snack/"/>
    <updated>2016-05-11T12:23:11+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/11/hihocoder-buy-snack</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>小卖部中有许多种零食，每种零食都有渴望度，且价格小数部分仅可能为0.5或0。一次只能买三包以内的零食，且价格必须是5的整数倍，求能买到的最大渴望度。<br/>
具体描述请见<a href="http://hihocoder.com/problemset/problem/1272">hihoCoder</a>。</p>

<!--more-->


<h2>解题思路</h2>

<p>动态规划。递推式：S[i,j,k] = max(S[i-1,j-1,k-m] + s[i], S[i-1,j,k])，其中i代表零食编号，j代表购买数量，k代表总价格乘2模10。m代表s[i]x2 mod 10。</p>

<h2>时间复杂度</h2>

<p>时间复杂度为4x10xN，空间复杂度为4x10xN，空间复杂度可优化成4x10x2，更进一步可优化成4x10x1（考虑到递推关系中每次变化仅相差1）。</p>

<h2>代码</h2>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

int mod(float p) {
    return (int) (p * 2) % 10;
}

int maxSat(float *A, int *B, int N) {
    int ***S = new int**[N];
    for (int i = 0; i &lt; N; i++) {
        S[i] = new int*[4];
        for (int j = 0; j &lt; 4; j++) {
            S[i][j] = new int[10];
            for (int k = 0; k &lt; 10; k++)
                S[i][j][k] = -1;
            S[i][0][0] = 0;
        }
    }

    S[0][1][mod(A[0])] = B[0];
    for (int i = 1; i &lt; N; i++) {
        for (int j = 1; j &lt; 4; j++) {
            for (int k = 0; k &lt; 10; k++) {
                int m = (k - mod(A[i]) + 10) % 10;
                if (S[i - 1][j - 1][m] != -1)
                    S[i][j][k] = S[i - 1][j - 1][m] + B[i];
                if (S[i - 1][j][k] != -1)
                    S[i][j][k] = max(S[i][j][k], S[i - 1][j][k]);
            }
        }
    }

    int maxS = 0;
    for (int i = 0; i &lt; 4; i++)
        maxS = max(maxS, S[N - 1][i][0]);

    for (int i = 1; i &lt; N; i++) {
        for (int j = 1; j &lt; 4; j++)
            delete[] S[i][j];
        delete[] S[i];
    }
    delete[] S;

    return maxS;
}

int main() {
    int Q = 0;
    cin &gt;&gt; Q;
    for (int i = 0; i &lt; Q; i++) {
        int N = 0;
        cin &gt;&gt; N;
        float *A = new float[N];
        int *B = new int[N];
        for (int j = 0; j &lt; N; j++)
            cin &gt;&gt; A[j] &gt;&gt; B[j];

        cout &lt;&lt; maxSat(A, B, N) &lt;&lt; endl;

        delete[] A, B;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder#1268 - 九宫]]></title>
    <link href="http://wangshenghu.github.io/blog/2016/05/10/hihocoder-magic-square/"/>
    <updated>2016-05-10T19:59:36+08:00</updated>
    <id>http://wangshenghu.github.io/blog/2016/05/10/hihocoder-magic-square</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>给定一个残缺的三阶幻方，判断是否只有一组可行解，如果只有一组可行解，打印之。<br/>
具体描述请见<a href="http://hihocoder.com/problemset/problem/1268">hihoCoder</a>。</p>

<!--more-->


<h2>解题思路</h2>

<p>对给定的残缺三阶幻方，首先可以通过行列斜之和为15尽可能进行补全；如果只有一种解，那一定可以填满9个数字，除了一种情况：“十字架”形。对“十字架”刑，实际上也只可能有一种解，可以根据已填数字推算出整个幻方。</p>

<h2>时间复杂度</h2>

<p>为常数。</p>

<h2>代码</h2>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

bool check(int *square) {
    int filled = 0;
    for (int i = 0; i &lt; 9; i++)
        filled += (square[i] != 0);
    int lastFilled = 0;
    do {
        lastFilled = filled;
        if (square[4] == 0) {
            square[4] = 5;
            filled++;
        }
        int state = (square[0] != 0) + (square[8] != 0);
        if (state == 1) {
            square[square[0] != 0 ? 8 : 0] = 10 - square[0] - square[8];
            filled++;
        }
        state = (square[1] != 0) + (square[7] != 0);
        if (state == 1) {
            square[square[1] != 0 ? 7 : 1] = 10 - square[1] - square[7];
            filled++;
        }
        state = (square[2] != 0) + (square[6] != 0);
        if (state == 1) {
            square[square[2] != 0 ? 6 : 2] = 10 - square[2] - square[6];
            filled++;
        }
        state = (square[3] != 0) + (square[5] != 0);
        if (state == 1) {
            square[square[3] != 0 ? 5 : 3] = 10 - square[3] - square[5];
            filled++;
        }

        state = (square[0] != 0) + (square[1] != 0) + (square[2] != 0);
        if (state == 2) {
            square[(square[1] == 0) + (square[2] == 0) * 2] = 15 - square[0] - square[1] - square[2];
            filled++;
        }
        state = (square[2] != 0) + (square[5] != 0) + (square[8] != 0);
        if (state == 2) {
            square[(square[2] == 0) * 2 + (square[5] == 0) * 5 + (square[8] == 0) * 8] = 15 - square[2] - square[5] - square[8];
            filled++;
        }
        state = (square[8] != 0) + (square[7] != 0) + (square[6] != 0);
        if (state == 2) {
            square[(square[8] == 0) * 8 + (square[7] == 0) * 7 + (square[6] == 0) * 6] = 15 - square[8] - square[7] - square[6];
            filled++;
        }
        state = (square[6] != 0) + (square[3] != 0) + (square[0] != 0);
        if (state == 2) {
            square[(square[6] == 0) * 6 + (square[3] == 0) * 3] = 15 - square[6] - square[3] - square[0];
            filled++;
        }

        state = (square[1] != 0) + (square[7] != 0) + (square[3] != 0) + (square[5] != 0) + (square[4] != 0);
        int state1 = (square[0] == 0) + (square[2] == 0) + (square[6] == 0) + (square[8] == 0);
        if (state == 5 &amp;&amp; state1 == 4) {
            if ((square[1] == 9 &amp;&amp; square[3] == 3) || (square[1] == 3 &amp;&amp; square[3] == 9)) {
                square[0] = 4;
                filled++;
            }
            else if ((square[1] == 9 &amp;&amp; square[3] == 7) || (square[1] == 7 &amp;&amp; square[3] == 9)) {
                square[0] = 2;
                filled++;
            }
            else if ((square[1] == 1 &amp;&amp; square[3] == 3) || (square[1] == 3 &amp;&amp; square[3] == 1)) {
                square[0] = 8;
                filled++;
            }
            else if ((square[1] == 1 &amp;&amp; square[3] == 7) || (square[1] == 7 &amp;&amp; square[3] == 1)) {
                square[0] = 6;
                filled++;
            }
        }
    } while (lastFilled != filled);

    return (filled == 9);
}

int main() {
    int *square = new int[9];
    for (int i = 0; i &lt; 9; i++)
        cin &gt;&gt; square[i];

    if (check(square))
        cout &lt;&lt; square[0] &lt;&lt; " " &lt;&lt; square[1] &lt;&lt; " " &lt;&lt; square[2] &lt;&lt; endl &lt;&lt; square[3] &lt;&lt; " "
        &lt;&lt; square[4] &lt;&lt; " " &lt;&lt; square[5] &lt;&lt; endl &lt;&lt; square[6] &lt;&lt; " " &lt;&lt; square[7] &lt;&lt; " "
        &lt;&lt; square[8] &lt;&lt; endl;
    else
        cout &lt;&lt; "Too Many" &lt;&lt; endl;

    delete[] square;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
